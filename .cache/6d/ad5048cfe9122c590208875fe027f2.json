{"id":"b8WN","dependencies":[{"name":"/Users/juan/filmmake/package.json","includedInParent":true,"mtime":1596354662487},{"name":"three","loc":{"line":1,"column":23},"parent":"/Users/juan/filmmake/js/rolls.js","resolved":"/Users/juan/filmmake/node_modules/three/build/three.module.js"},{"name":"./shader/fragment.glsl","loc":{"line":2,"column":21},"parent":"/Users/juan/filmmake/js/rolls.js","resolved":"/Users/juan/filmmake/js/shader/fragment.glsl"},{"name":"./shader/vertex.glsl","loc":{"line":3,"column":19},"parent":"/Users/juan/filmmake/js/rolls.js","resolved":"/Users/juan/filmmake/js/shader/vertex.glsl"},{"name":"dat.gui","loc":{"line":4,"column":21},"parent":"/Users/juan/filmmake/js/rolls.js","resolved":"/Users/juan/filmmake/node_modules/dat.gui/build/dat.gui.module.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar THREE = _interopRequireWildcard(require(\"three\"));\n\nvar _fragment = _interopRequireDefault(require(\"./shader/fragment.glsl\"));\n\nvar _vertex = _interopRequireDefault(require(\"./shader/vertex.glsl\"));\n\nvar dat = _interopRequireWildcard(require(\"dat.gui\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Sketch = /*#__PURE__*/function () {\n  function Sketch(selector) {\n    _classCallCheck(this, Sketch);\n\n    this.scene = new THREE.Scene();\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    this.width = window.innerWidth;\n    this.height = window.innerHeight;\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.setSize(this.width, this.height);\n    this.renderer.sortObjects = false;\n    this.renderer.outputEncoding = THREE.sRGBEncoding;\n    this.container = document.getElementById(\"container\");\n    this.container.appendChild(this.renderer.domElement);\n    this.camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 300, 1000);\n    this.cameraDistance = 400;\n    this.camera.position.set(0, 0, this.cameraDistance);\n    this.camera.lookAt(0, 0, 0);\n    this.time = 0;\n    this.paused = false;\n    this.settings();\n    this.setupResize();\n    this.addObjects();\n    this.resize();\n    this.render();\n  }\n\n  _createClass(Sketch, [{\n    key: \"settings\",\n    value: function settings() {\n      var that = this;\n      this.settings = {\n        progress: 0,\n        angle: 0.25\n      }; // this.gui = new dat.GUI();\n      // // this.gui.add(this.settings, \"progress\", -1, 2, 0.01);\n      // this.gui.add(this.settings, \"progress\", 0, 1, 0.01);\n      // this.gui.add(this.settings, \"angle\", 0, 3.1415, 0.01);\n    }\n  }, {\n    key: \"setupResize\",\n    value: function setupResize() {\n      window.addEventListener(\"resize\", this.resize.bind(this));\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      this.width = window.innerWidth;\n      this.height = window.innerHeight;\n      this.renderer.setSize(this.width, this.height);\n      this.camera.aspect = this.width / this.height;\n      this.camera.fov = 2 * Math.atan(this.width / this.camera.aspect / (2 * this.cameraDistance)) * (180 / Math.PI); // in degrees\n\n      this.camera.updateProjectionMatrix();\n    }\n  }, {\n    key: \"addObjects\",\n    value: function addObjects() {\n      var that = this;\n      this.geometry = new THREE.PlaneBufferGeometry(1, 1, 80, 80);\n      this.material = new THREE.ShaderMaterial({\n        extensions: {\n          derivatives: \"#extension GL_OES_standard_derivatives : enable\"\n        },\n        side: THREE.DoubleSide,\n        uniforms: {\n          time: {\n            type: \"f\",\n            value: 0\n          },\n          progress: {\n            type: \"f\",\n            value: 0\n          },\n          angle: {\n            type: \"f\",\n            value: 0\n          },\n          texture1: {\n            type: \"t\",\n            value: null\n          },\n          texture2: {\n            type: \"t\",\n            value: null\n          },\n          resolution: {\n            type: \"v4\",\n            value: new THREE.Vector4()\n          },\n          uvRate1: {\n            value: new THREE.Vector2(1, 1)\n          }\n        },\n        // wireframe: true,\n        transparent: true,\n        vertexShader: _vertex.default,\n        fragmentShader: _fragment.default\n      });\n    }\n  }, {\n    key: \"createMesh\",\n    value: function createMesh(o) {\n      var material = this.material.clone();\n      var texture = new THREE.Texture(o.image);\n      texture.needsUpdate = true; // image cover\n\n      var imageAspect = o.iHeight / o.iWidth;\n      var a1;\n      var a2;\n\n      if (o.height / o.width > imageAspect) {\n        a1 = o.width / o.height * imageAspect;\n        a2 = 1;\n      } else {\n        a1 = 1;\n        a2 = o.height / o.width / imageAspect;\n      }\n\n      texture.minFilter = THREE.LinearFilter;\n      material.uniforms.resolution.value.x = o.width;\n      material.uniforms.resolution.value.y = o.height;\n      material.uniforms.resolution.value.z = a1;\n      material.uniforms.resolution.value.w = a2;\n      material.uniforms.progress.value = 0;\n      material.uniforms.angle.value = 0.3;\n      material.uniforms.texture1.value = texture;\n      material.uniforms.texture1.value.needsUpdate = true;\n      var mesh = new THREE.Mesh(this.geometry, material);\n      mesh.scale.set(o.width, o.height, o.width / 2);\n      return mesh;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.paused = true;\n    }\n  }, {\n    key: \"play\",\n    value: function play() {\n      this.paused = false;\n      this.render();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      this.scene.children.forEach(function (m) {\n        if (m.material.uniforms) {\n          m.material.uniforms.angle.value = _this.settings.angle;\n        }\n      });\n      this.renderer.render(this.scene, this.camera);\n    }\n  }]);\n\n  return Sketch;\n}();\n\nexports.default = Sketch;"},"sourceMaps":null,"error":null,"hash":"218faf8a6c0c133eb94d0e354b54d208","cacheData":{"env":{}}}